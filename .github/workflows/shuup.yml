name: CI

on:
  push:
    branches: [ master, 2.x ]
  pull_request:
    branches: [ master, 2.x ]

jobs:

  codestyle:
    name: "Code style & sanity checks"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    - name: Set up Python
      run: uv python install 3.11
    - name: Create virtual environment
      run: uv venv .venv
    - name: Install build dependencies
      run: uv pip install setuptools wheel
    - name: Install dev dependencies (without editable)
      run: uv pip install black isort flake8 mypy pytest pytest-django pytest-cov coverage sphinx sphinx-rtd-theme pre-commit
    - name: Install package in editable mode
      run: uv pip install -e .
    - name: Run sanity check
      run: uv run _misc/check_sanity.py
    - name: Run license headers check
      run: uv run _misc/ensure_license_headers.py -s shuup
    - name: Check flake8
      run: uv run flake8 .
    - name: Check isort
      run: uv run isort --check --diff .
    - name: Check black
      run: uv run black --check --diff .

  core:
    name: "Test Shuup, migrations and messages"
    runs-on: ubuntu-latest
    env:
      SHUUP_BROWSER_TESTS: 0
      SHUUP_TESTS_CI: 1
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    - name: Set up Python
      run: uv python install ${{ matrix.python-version }}
    - name: Create virtual environment
      run: uv venv .venv
    - name: Install build dependencies
      run: uv pip install setuptools wheel
    - name: Install gettext
      run: sudo apt-get -y install gettext
    - name: Install system dependencies
      run: sudo apt-get -y install libffi-dev
    - name: Install dependencies (without editable)
      run: uv pip install pytest pytest-django pytest-cov coverage codecov
    - name: Install package in editable mode
      run: uv pip install -e .
    - name: Create logs folder
      run: mkdir .unit_tests
    - name: Run makemessages
      run: uv run python -m shuup_workbench shuup_makemessages -l en
    - name: Run tests
      run: uv run pytest --nomigrations shuup_tests --cov shuup --cov-config=.coveragerc
    - name: Run compilemessages
      run: uv run python -m shuup_workbench compilemessages
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: unit_tests
        path: .unit_tests/*.*

  browser:
    name: "Test Shuup with browser"
    runs-on: ubuntu-latest
    env:
      SHUUP_BROWSER_TESTS: 1
      SHUUP_TESTS_CI: 1
    strategy:
      matrix:
        python-version: ['3.11']
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    - name: Set up Python
      run: uv python install ${{ matrix.python-version }}

    - name: "Setup Firefox driver"
      uses: browser-actions/setup-geckodriver@latest
    - run: geckodriver --version

    - name: Install gettext
      run: sudo apt-get -y install gettext

    - name: Install system dependencies  
      run: sudo apt-get -y install libffi-dev

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Create virtual environment
      run: uv venv .venv

    - name: Install build dependencies
      run: uv pip install setuptools wheel

    - name: Install dependencies (without editable)
      run: uv pip install pytest pytest-django pytest-cov coverage pytest-splinter splinter selenium weasyprint pillow beautifulsoup4 mock

    - name: Install package in editable mode
      run: uv pip install -e .

    - name: Build static files
      run: uv run shuup-build-resources

    - name: Compile messages
      run: uv run python -m shuup_workbench compilemessages

    - name: Create logs folder
      run: mkdir .unit_tests

    - name: Run tests
      run: uv run pytest -v --nomigrations shuup_tests/browser/front shuup_tests/browser/admin --splinter-headless --splinter-screenshot-dir=.unit_tests/

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: unit_tests
        path: .unit_tests/*.*
